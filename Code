<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Decibel Reader with Mic</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #1f4037, #99f2c8);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      color: #fff;
    }

    .app-container {
      background: rgba(0, 0, 0, 0.6);
      border-radius: 20px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
      padding: 30px;
      max-width: 700px;
      width: 100%;
      text-align: center;
      overflow: hidden;
      position: relative;
    }

    .header {
      font-size: 2.5em;
      font-weight: bold;
      margin-bottom: 20px;
      text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.7);
    }

    .decibel-display {
      font-size: 5em;
      font-weight: bold;
      margin: 30px 0;
      transition: color 0.4s ease-in-out;
      padding: 20px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      backdrop-filter: blur(5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      display: inline-block;
    }

    .side-menu {
      margin-top: 30px;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 15px;
      padding: 20px;
      backdrop-filter: blur(5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      text-align: left;
      color: #eee;
    }

    .side-menu h2 {
      font-size: 1.5em;
      margin-bottom: 15px;
    }

    .side-menu ul {
      list-style-type: none;
    }

    .side-menu ul li {
      margin-bottom: 10px;
      transition: color 0.3s ease;
    }

    .side-menu ul li:hover {
      color: #ffeb3b;
      cursor: pointer;
    }

    .footer {
      margin-top: 20px;
    }

    button {
      padding: 15px 25px;
      font-size: 1.2em;
      background: linear-gradient(135deg, #ff416c, #ff4e50);
      color: white;
      border: none;
      border-radius: 30px;
      cursor: pointer;
      transition: background 0.4s ease;
    }

    button:hover {
      background: linear-gradient(135deg, #ffb347, #ffcc33);
    }

  </style>
</head>
<body>

  <div class="app-container">
    <header class="header">Decibel Reader</header>

    <div class="decibel-display">
      <span id="decibel-level">0</span> dB
    </div>

    <div class="side-menu">
      <h2>Decibel Examples</h2>
      <ul>
        <li>Siren: 110 dB</li>
        <li>Talking: 60 dB</li>
        <li>Whisper: 30 dB</li>
        <li>Jet Engine: 140 dB</li>
        <li>Car Horn: 90 dB</li>
      </ul>
    </div>

    <div class="footer">
      <button id="start-btn">Start Measuring</button>
    </div>
  </div>

  <script>
    const decibelDisplay = document.getElementById('decibel-level');
    const startBtn = document.getElementById('start-btn');
    let audioContext, analyser, microphone, javascriptNode;

    startBtn.addEventListener('click', async () => {
      if (navigator.mediaDevices.getUserMedia) {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          audioContext = new AudioContext();
          analyser = audioContext.createAnalyser();
          microphone = audioContext.createMediaStreamSource(stream);
          javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);

          analyser.smoothingTimeConstant = 0.8;
          analyser.fftSize = 1024;

          microphone.connect(analyser);
          analyser.connect(javascriptNode);
          javascriptNode.connect(audioContext.destination);

          javascriptNode.onaudioprocess = () => {
            let array = new Uint8Array(analyser.frequencyBinCount);
            analyser.getByteFrequencyData(array);
            let values = 0;

            let length = array.length;
            for (let i = 0; i < length; i++) {
              values += array[i];
            }

            let average = values / length;
            let decibelLevel = Math.round(average);
            decibelDisplay.textContent = decibelLevel;

            // Change color based on decibel levels
            if (decibelLevel < 60) {
              decibelDisplay.style.color = '#4CAF50'; // Green
            } else if (decibelLevel < 100) {
              decibelDisplay.style.color = '#FFA500'; // Orange
            } else {
              decibelDisplay.style.color = '#FF0000'; // Red
            }
          };
        } catch (err) {
          console.error('Error accessing the microphone: ', err);
        }
      } else {
        console.error('getUserMedia not supported in this browser.');
      }
    });
  </script>

</body>
</html>
